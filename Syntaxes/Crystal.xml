<?xml version="1.0" encoding="UTF-8" ?>
<syntax name="crystal">
  <meta>
    <name>Crystal</name>
    <type>script</type>
    <preferred-file-extension>cr</preferred-file-extension>
  </meta>

  <detectors>
    <extension priority="1.0">cr</extension>
  </detectors>

  <indentation>
    <increase>
      <expression>
        (^\s*(class|def|elsif|else|rescue|ensure|for|if|begin|with)\b.*$) #keywords
        |(\b(do)$) #do
        |(\{[^}\"']*$) #blocks
        |(\[[^\]\"']*$) #arrays
        |(\([^)\"']*$) #tuples
        |(\|[a-zA-Z0-9_,\s]+\|$) #closures
      </expression>
    </increase>
    <decrease>
      <expression>(^\s*(elsif|else|rescue|ensure|end)\b)|(^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\])</expression>
    </decrease>
  </indentation>

  <comments>
    <single>
      <expression>#</expression>
    </single>
  </comments>

  <brackets>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
  </brackets>

  <surrounding-pairs>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
    <pair open="&apos;" close="&apos;" />
    <pair open="&quot;" close="&quot;" />
    <pair open="`" close="`" />
    <pair open="“" close="”" />
    <pair open="‘" close="’" />
  </surrounding-pairs>

  <scopes>
    <include syntax="self" collection="comments" />
    <include syntax="self" collection="keywords" />
    <include syntax="self" collection="definitions" />
    <include syntax="self" collection="identifiers" />
  </scopes>

  <collections>
    <collection name="comments">
      <scope name="crystal.comment.single" spell-check="true">
        <expression>\#(.*)$</expression>
        <capture number="1" name="crystal.comment.content" />
      </scope>
    </collection>

    <collection name="keywords">
      <scope name="crystal.keyword">
        <strings suffix="(?!\?)">
          <string>abstract</string>
          <string>alias</string>
          <string>annotation</string>
          <string>asm</string>
          <string>begin</string>
          <string>break</string>
          <string>case</string>
          <string>class</string>
          <string>def</string>
          <string>do</string>
          <string>else</string>
          <string>elsif</string>
          <string>end</string>
          <string>ensure</string>
          <string>enum</string>
          <string>extend</string>
          <string>for</string>
          <string>fun</string>
          <string>if</string>
          <string>in</string>
          <string>include</string>
          <string>macro</string>
          <string>module</string>
          <string>next</string>
          <string>of</string>
          <string>private</string>
          <string>protected</string>
          <string>require</string>
          <string>rescue</string>
          <string>return</string>
          <string>select</string>
          <string>struct</string>
          <string>struct</string>
          <string>super</string>
          <string>then</string>
          <string>union</string>
          <string>unless</string>
          <string>until</string>
          <string>when</string>
          <string>while</string>
          <string>with</string>
          <string>yield</string>
        </strings>
      </scope>
    </collection>

    <collection name="definitions">
      <scope name="crystal.value.number.float.fraction">
        <expression>\b[0-9][0-9_]*\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\b</expression>
      </scope>
      <scope name="crystal.value.number.float.exponent">
        <expression>\b[0-9][0-9_]*(\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\b</expression>
      </scope>
      <scope name="crystal.value.number.integer.decimal">
        <expression>\b(?!0[0-9])[0-9][0-9_]*([ui](8|16|32|64|128))?\b</expression>
      </scope>
      <scope name="crystal.value.number.integer.hexadecimal">
        <expression>\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128))?\b</expression>
      </scope>
      <scope name="crystal.value.number.integer.octal">
        <expression>\b0o[0-7_]+([ui](8|16|32|64|128))?\b</expression>
      </scope>
    </collection>

    <collection name="identifiers">
      <scope name="crystal.identifier.variable.global">
        <expression>\$[a-z][\w]*</expression>
      </scope>
      <scope name="crystal.identifier.variable.instance">
        <expression>@[a-z][\w]*</expression>
      </scope>
      <scope name="crystal.identifier.variable.class">
        <expression>@@[a-z][\w]*</expression>
      </scope>
    </collection>
  </collections>
</syntax>
