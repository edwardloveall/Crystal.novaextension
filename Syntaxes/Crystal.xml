<?xml version="1.0" encoding="UTF-8" ?>
<syntax name="crystal">
  <meta>
    <name>Crystal</name>
    <type>script</type>
    <preferred-file-extension>cr</preferred-file-extension>
  </meta>

  <detectors>
    <extension priority="1.0">cr</extension>
  </detectors>

  <indentation>
    <increase>
      <expression>
        (^\s*(class|def|elsif|else|rescue|ensure|for|if|begin|with)\b.*$) #keywords
        |(\b(do)$) #do
        |(\{[^}\"']*$) #blocks
        |(\[[^\]\"']*$) #arrays
        |(\([^)\"']*$) #tuples
        |(\|[a-zA-Z0-9_,\s]+\|$) #closures
      </expression>
    </increase>
    <decrease>
      <expression>(^\s*(elsif|else|rescue|ensure|end)\b)|(^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\])</expression>
    </decrease>
  </indentation>

  <comments>
    <single>
      <expression>#</expression>
    </single>
  </comments>

  <brackets>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
  </brackets>

  <surrounding-pairs>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
    <pair open="&apos;" close="&apos;" />
    <pair open="&quot;" close="&quot;" />
    <pair open="`" close="`" />
    <pair open="“" close="”" />
    <pair open="‘" close="’" />
  </surrounding-pairs>

  <scopes>
    <include syntax="self" collection="comments" />
    <include syntax="self" collection="keywords" />
    <include syntax="self" collection="values" />
    <include syntax="self" collection="identifiers" />
    <include syntax="self" collection="strings" />
    <include syntax="self" collection="symbols" />
    <include syntax="self" collection="syntax" />
  </scopes>

  <collections>
    <collection name="comments">
      <scope name="crystal.comment.single" spell-check="true">
        <expression>\#(.*)$</expression>
        <capture number="1" name="crystal.comment.content" />
      </scope>
    </collection>

    <collection name="keywords">
      <scope name="crystal.keyword">
        <strings suffix="(?!\?)">
          <string>abstract</string>
          <string>alias</string>
          <string>annotation</string>
          <string>asm</string>
          <string>begin</string>
          <string>break</string>
          <string>case</string>
          <string>class</string>
          <string>def</string>
          <string>do</string>
          <string>else</string>
          <string>elsif</string>
          <string>end</string>
          <string>ensure</string>
          <string>enum</string>
          <string>extend</string>
          <string>for</string>
          <string>fun</string>
          <string>if</string>
          <string>in</string>
          <string>include</string>
          <string>macro</string>
          <string>module</string>
          <string>next</string>
          <string>of</string>
          <string>private</string>
          <string>protected</string>
          <string>require</string>
          <string>rescue</string>
          <string>return</string>
          <string>select</string>
          <string>struct</string>
          <string>struct</string>
          <string>super</string>
          <string>then</string>
          <string>union</string>
          <string>unless</string>
          <string>until</string>
          <string>when</string>
          <string>while</string>
          <string>with</string>
          <string>yield</string>
        </strings>
      </scope>
    </collection>

    <collection name="values">
      <scope name="crystal.value.null">
        <strings>
          <string>nil</string>
        </strings>
      </scope>
      <scope name="crystal.value.boolean">
        <strings>
          <string>true</string>
          <string>false</string>
        </strings>
      </scope>
      <scope name="crystal.value.number.float.fraction">
        <expression>\b[0-9][0-9_]*\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\b</expression>
      </scope>
      <scope name="crystal.value.number.float.exponent">
        <expression>\b[0-9][0-9_]*(\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\b</expression>
      </scope>
      <scope name="crystal.value.number.integer.decimal">
        <expression>\b(?!0[0-9])[0-9][0-9_]*([ui](8|16|32|64|128))?\b</expression>
      </scope>
      <scope name="crystal.value.number.integer.hexadecimal">
        <expression>\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128))?\b</expression>
      </scope>
      <scope name="crystal.value.number.integer.octal">
        <expression>\b0o[0-7_]+([ui](8|16|32|64|128))?\b</expression>
      </scope>
      <scope name="crystal.string.char">
        <expression>&apos;(\w|\\[abefnrtv\\]|[\x{9F}-\x{10FFFF}])&apos;</expression>
      </scope>
      <scope name="crystal.string.char.unicode">
        <expression>&apos;\\u([0-9a-fA-F]{4}|\{[0-9a-fA-F]{6}\})&apos;</expression>
      </scope>
    </collection>

    <collection name="identifiers">
      <scope name="crystal.identifier.variable.global">
        <expression>\$[a-z][\w]*</expression>
      </scope>
      <scope name="crystal.identifier.variable.instance">
        <expression>@[a-z][\w]*</expression>
      </scope>
      <scope name="crystal.identifier.variable.class">
        <expression>@@[a-z][\w]*</expression>
      </scope>
    </collection>

    <collection name="strings">
      <scope name="crystal.string.double-quoted">
        <starts-with>
          <expression>&quot;</expression>
          <capture number="0" name="crystal.string.double-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>(?&lt;![\\])&quot;</expression>
          <capture number="0" name="crystal.string.double-quoted.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="string-interpolation" />
        </subscopes>
      </scope>
      <scope name="crystal.string.single-quoted">
        <starts-with>
          <expression>&apos;</expression>
          <capture number="0" name="crystal.string.single-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>(?&lt;![\\])&apos;</expression>
          <capture number="0" name="crystal.string.single-quoted.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="string-interpolation" />
        </subscopes>
      </scope>
      <!-- Percent encoded with parenthesis -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>(%[Q]?)(\()</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\)</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="string-interpolation" />
        </subscopes>
      </scope>
      <!-- Percent encoded with parenthesis, no interpolation -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>%q\(</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\)</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
      </scope>
      <!-- Percent encoded with square bracket -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>(%[Q]?)(\[)</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\]</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="string-interpolation" />
        </subscopes>
      </scope>
      <!-- Percent encoded with square bracket, no interpolation -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>%q\[</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\]</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
      </scope>
      <!-- Percent encoded with curly bracket -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>(%[Q]?)(\{)</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\}</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="string-interpolation" />
        </subscopes>
      </scope>
      <!-- Percent encoded with curly bracket, no interpolation -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>%q\{</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\}</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
        <!--
          Since the curly bracket is used for string interpolation,
          we need to match it as a subscope so we can ignore it.
        -->
        <subscopes>
          <scope name="crystal.string.percent-quoted">
            <starts-with>
              <expression>\#\{</expression>
            </starts-with>
            <ends-with>
              <expression>\}</expression>
            </ends-with>
          </scope>
        </subscopes>
      </scope>
      <!-- Percent encoded with angle bracket -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>(%[Q]?)(&lt;)</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>&gt;</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="string-interpolation" />
        </subscopes>
      </scope>
      <!-- Percent encoded with angle bracket, no interpolation -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>%q&lt;</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>&gt;</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
      </scope>
      <!-- Percent encoded with pipe -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>(%[Q]?)(\|)</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\|</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="string-interpolation" />
        </subscopes>
      </scope>
      <!-- Percent encoded with pipe, no interpolation -->
      <scope name="crystal.string.percent-quoted">
        <starts-with>
          <expression>%q\|</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\|</expression>
          <capture number="0" name="crystal.string.percent-quoted.delimiter" />
        </ends-with>
      </scope>
      <!-- Percent array with parenthesis -->
      <scope name="crystal.string.percent-array">
        <starts-with>
          <expression>%w\(</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\)</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" />
        </subscopes>
      </scope>
      <!-- Percent array with square brackets -->
      <scope name="crystal.string.percent-array">
        <starts-with>
          <expression>%w\[</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\]</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" />
        </subscopes>
      </scope>
      <!-- Percent array with curly brackets -->
      <scope name="crystal.string.percent-array">
        <starts-with>
          <expression>%w\{</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\}</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" />
        </subscopes>
      </scope>
      <!-- Percent array with angle brackets -->
      <scope name="crystal.string.percent-array">
        <starts-with>
          <expression>%w&lt;</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </starts-with>
        <ends-with>
          <expression>&gt;</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" />
        </subscopes>
      </scope>
      <!-- Percent array with pipes -->
      <scope name="crystal.string.percent-array">
        <starts-with>
          <expression>%w\|</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\|</expression>
          <capture number="0" name="crystal.string.percent-array.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" />
        </subscopes>
      </scope>
      <scope name="crystal.string.heredoc">
        <starts-with>
          <expression>(&lt;&lt;(?:-))\s?([a-zA-Z]\w*)</expression>
          <capture number="1" name="crystal.string.heredoc.delimiter" />
          <capture number="2" name="crystal.string.heredoc.identifier" />
        </starts-with>
        <ends-with>
          <template>^\s*($2)$</template>
          <capture number="1" name="crystal.string.heredoc.identifier" />
          <capture number="2" name="crystal.string.heredoc.delimiter" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="string-interpolation" />
        </subscopes>
      </scope>
    </collection>

    <collection name="symbols">
      <scope name="crystal.value.symbol.unquoted">
        <expression>(?&lt;!:):[A-Za-z](\w|[\x{9F}-\x{10FFFF}])*(\?|!)?</expression>
      </scope>
      <scope name="crystal.value.symbol.quoted">
        <starts-with>
          <expression>(?&lt;!:):&quot;</expression>
        </starts-with>
        <ends-with>
          <expression>(?&lt;![\\])&quot;</expression>
        </ends-with>
      </scope>
      <scope name="crystal.value.symbol.operation">
        <expression>:(&lt;=&gt;|===|\[\]\?|\[\]=|\[\]|!~|=~|\*\*|&gt;&gt;|&lt;&lt;|==|!=|&gt;=|&lt;=|[\+\-\*\|/%&amp;^&gt;&lt;!~])</expression>
      </scope>
      <!-- Percent array with parenthesis -->
      <scope name="crystal.value.symbol.percent-array">
        <starts-with>
          <expression>%i\(</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\)</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </ends-with>
        <subscopes>
          <scope name="crystal.value.symbol.percent-array">
            <starts-with><expression>\(</expression></starts-with>
            <ends-with><expression>\)</expression></ends-with>
          </scope>
          <include syntax="self" />
        </subscopes>
      </scope>
      <!-- Percent array with square brackets -->
      <scope name="crystal.value.symbol.percent-array">
        <starts-with>
          <expression>%i\[</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\]</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </ends-with>
        <subscopes>
          <scope name="crystal.value.symbol.percent-array">
            <starts-with><expression>\[</expression></starts-with>
            <ends-with><expression>\]</expression></ends-with>
          </scope>
          <include syntax="self" />
        </subscopes>
      </scope>
      <!-- Percent array with curly brackets -->
      <scope name="crystal.value.symbol.percent-array">
        <starts-with>
          <expression>%i\{</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\}</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </ends-with>
        <subscopes>
          <scope name="crystal.value.symbol.percent-array">
            <starts-with><expression>\{</expression></starts-with>
            <ends-with><expression>\}</expression></ends-with>
          </scope>
          <include syntax="self" />
        </subscopes>
      </scope>
      <!-- Percent array with angle brackets -->
      <scope name="crystal.value.symbol.percent-array">
        <starts-with>
          <expression>%i&lt;</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </starts-with>
        <ends-with>
          <expression>&gt;</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </ends-with>
        <subscopes>
          <scope name="crystal.value.symbol.percent-array">
            <starts-with><expression>&lt;</expression></starts-with>
            <ends-with><expression>&gt;</expression></ends-with>
          </scope>
          <include syntax="self" />
        </subscopes>
      </scope>
      <!-- Percent array with pipes -->
      <scope name="crystal.value.symbol.percent-array">
        <starts-with>
          <expression>%i\|</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </starts-with>
        <ends-with>
          <expression>\|</expression>
          <capture number="0" name="crystal.value.symbol.delimiter" />
        </ends-with>
      </scope>
    </collection>

    <collection name="string-interpolation">
      <scope name="crystal.string-template">
        <starts-with>
          <expression>\#\{</expression>
        </starts-with>
        <ends-with>
          <expression>\}</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="strings" />
          <include syntax="self" collection="values" />
        </subscopes>
      </scope>
    </collection>

    <collection name="syntax">
      <scope name="crystal.bracket">
        <expression>[\(\[\{\)\]\}]</expression>
      </scope>
      <scope name="crystal.operator">
        <expression>((\*|\*\*|&lt;&lt;|&gt;&gt;|\|\||&amp;&amp;|[+-/%|&amp;^~=!&lt;&gt;])?\=?)</expression>
      </scope>
    </collection>
  </collections>
</syntax>
